const fs = require('fs');
const path = require('path');

const prompts = require('prompts');
const colors = require('../helpers/colors.js');
const { error, copyFolderSync, link, msg, executeCommand } = require('../helpers/utils.js');

async function setupGateway(setupPath) {
  if (!setupPath) {
    if (fs.readdirSync(path.join(process.cwd(), ".")).length === 0) {
      // empty dir
      setupPath = "."
    } else {
      ({setupPath} = await prompts({
        type: 'text',
        name: 'setupPath',
        message: 'Enter directory name'
      }));
    }
  }
  const projectSetupPath = path.join(process.cwd(), setupPath);
  console.log('>> ðŸŽ‰ Razorpay Payment Gateway will be initialized at ' + setupPath);

  const { hasRazorpayAccount } = await prompts({
    type: 'confirm',
    name: 'hasRazorpayAccount',
    message: 'Do you have a Razorpay Account?',
    initial: true
  });
 
  if (!hasRazorpayAccount) {
    console.log(error('Oops. Creating Razorpay Payment Gateway requires an account on razorpay.com.'));
    console.log(`Please create account from the link- ${link('https://dashboard.razorpay.com/signup')}`);
    process.exit(0);
  }

  console.log(colors.boldGrey('\n> ') + colors.bold('API Keys:'));
  console.log(
    'Make sure you have Razorpay API Keys Generated. Refer ' 
    + link('https://razorpay.com/docs/payment-gateway/server-integration/nodejs/usage/#generate-api-key')
    + ' to generate API Keys'
  );

  const { 
    razorpayKeyId, 
    razorpaySecretKey
  } = await prompts([
    {
      type: 'text',
      name: 'razorpayKeyId',
      message: 'Razorpay Key ID'
    },
    {
      type: 'text',
      name: 'razorpaySecretKey',
      message: 'Razorpay Secret Key'
    }
  ]);


  const { backendTemplate, frontendTemplate } = await prompts([
    {
      type: 'select',
      name: 'backendTemplate',
      message: 'Select Backend Template',
      choices: [
        {
          title: 'Node.js',
          value: 'node-gateway'
        },
        {
          title: 'PHP',
          value: 'php-gateway'
        },
        {
          title: 'Python',
          value: 'python-gateway'
        }
      ]
    },
    {
      type: 'select',
      name: 'frontendTemplate',
      message: 'Select Frontend Template',
      choices: [
        {
          title: 'HTML + JS',
          value: 'html-client'
        },
        {
          title: 'React',
          value: 'react-client'
        },
        {
          title: 'Vue',
          value: 'vue-gateway'
        }
      ]
    }
  ]);

  if (backendTemplate !== 'node-gateway' || frontendTemplate !== 'html-client') {
    console.log(error('Woops! Hackathon mei bs Node.js aur HTML he milega. Baaki sb nakhre baadme :('));
    process.exit(0);
  }

  console.log(msg('Please wait while we setup a project for you'));

  if (!fs.existsSync(projectSetupPath)) {
    fs.mkdirSync(projectSetupPath);
  }

  const templatesDir = path.join(__dirname, '..', '..', 'templates');

  console.log(msg('Setting up Backend Template'))
  copyFolderSync(
    path.join(templatesDir, 'backend', backendTemplate),
    path.join(projectSetupPath, 'backend'),
    [
      path.join(templatesDir, 'backend', backendTemplate, 'node_modules')
    ],
    true
  )


  console.log(msg('Installing Backend Dependencies'));
  await executeCommand('npm', ['install'], {
    cwd: path.join(projectSetupPath, 'backend'),
    stdio: [process.stdin, process.stdout, process.stderr]
  })

  const envData = `RAZORPAY_KEY_ID=${razorpayKeyId}\nRAZORPAY_SERVER_KEY=${razorpaySecretKey}`
  fs.writeFileSync(path.join(projectSetupPath, 'backend', '.env'), envData)

  console.log(msg('Setting up Frontend Template'))
  copyFolderSync(
    path.join(templatesDir, 'frontend', frontendTemplate),
    path.join(projectSetupPath, 'frontend'),
    [
      path.join(templatesDir, 'frontend', frontendTemplate, 'node_modules')
    ],
    true
  )

  const mainJsContent = fs.readFileSync(path.join(projectSetupPath, 'frontend', 'main.js'), 'utf-8');
  const newData = `const RAZORPAY_API_KEY_ID = '${razorpayKeyId}';\n` + mainJsContent;
  
  fs.writeFileSync(path.join(projectSetupPath, 'frontend', 'main.js'), newData);

  console.log(msg('Installing Frontend Dependencies'));
  await executeCommand('npm', ['install'], {
    cwd: path.join(projectSetupPath, 'frontend'),
    stdio: [process.stdin, process.stdout, process.stderr]
  })

  fs.copyFileSync(
    path.join(templatesDir, 'data', 'README.md'), 
    path.join(projectSetupPath, 'README.md')
  )

  console.log(msg('Generated README.md\n\n'));

  const relativeProjectPath = path.relative(process.cwd(), projectSetupPath)
  console.log('ðŸŽ‰ Doneee! Execute following commands in 2 different terminals-');
  console.log(`cd ${relativeProjectPath}/frontend && npm start`);
  console.log(`cd ${relativeProjectPath}/backend && npm start`);
}

module.exports = setupGateway;